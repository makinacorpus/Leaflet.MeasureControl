!function(e,t){"function"==typeof define&&define.amd?define(["leaflet"],function(o){e(o,t.toGeoJSON)}):"object"==typeof exports?module.exports=function(o){return void 0===o&&"undefined"!=typeof t&&(o=require("leaflet")),e(o),o}:"undefined"!=typeof t&&t.L&&e(t.L)}(function(e){e.Polyline.Measure=e.Draw.Polyline.extend({addHooks:function(){e.Draw.Polyline.prototype.addHooks.call(this),this._map&&(this._markerGroup=new e.LayerGroup,this._map.addLayer(this._markerGroup),this._markers=[],this._map.on("click",this._onClick,this),this._startShape())},removeHooks:function(){e.Draw.Polyline.prototype.removeHooks.call(this),this._clearHideErrorTimeout(),this._map.off("pointermove",this._onMouseMove,this).off("mousemove",this._onMouseMove,this).off("click",this._onClick,this),this._clearGuides(),this._container.style.cursor="",this._removeShape()},_startShape:function(){this._drawing=!0,this._poly=new e.Polyline([],this.options.shapeOptions),this._poly._onClick=function(){},this._container.style.cursor="crosshair",this._updateTooltip(),this._map.on("pointermove",this._onMouseMove,this).on("mousemove",this._onMouseMove,this)},_finishShape:function(){this._drawing=!1,this._cleanUpShape(),this._clearGuides(),this._updateTooltip(),this._map.off("pointermove",this._onMouseMove,this).off("mousemove",this._onMouseMove,this),this._container.style.cursor=""},_removeShape:function(){this._poly&&(this._map.removeLayer(this._poly),delete this._poly,this._markers.splice(0),this._markerGroup.clearLayers())},_onClick:function(){if(!this._drawing)return this._removeShape(),void this._startShape()},_getMeasurementString:function(){if(!this.options.multiDistance)return e.Draw.Polyline.prototype._getMeasurementString.call(this)
var t,o=this._currentLatLng,i=this._markers[this._markers.length-1].getLatLng()
t=this._measurementRunningTotal+o.distanceTo(i)
var n=[]
return this.options.metric&&n.push(e.GeometryUtil.readableDistance(t,!0)),this.options.imperial&&n.push(e.GeometryUtil.readableDistance(t,!1)),n.join("<br/>")},_getTooltipText:function(){var t=e.Draw.Polyline.prototype._getTooltipText.call(this)
return this._drawing||(t.text=""),t}}),e.Control.MeasureControl=e.Control.extend({statics:{TITLE:"Measure distances"},options:{position:"topleft",handler:{}},toggle:function(){this.handler.enabled()?this.handler.disable.call(this.handler):this.handler.enable.call(this.handler)},onAdd:function(t){var o=null,i="leaflet-control-draw"
return this._container=e.DomUtil.create("div","leaflet-bar"),this.handler=new e.Polyline.Measure(t,this.options.handler),this.handler.on("enabled",function(){this.enabled=!0,e.DomUtil.addClass(this._container,"enabled")},this),this.handler.on("disabled",function(){delete this.enabled,e.DomUtil.removeClass(this._container,"enabled")},this),o=e.DomUtil.create("a",i+"-measure",this._container),o.href="#",o.title=e.Control.MeasureControl.TITLE,e.DomEvent.addListener(o,"click",e.DomEvent.stopPropagation).addListener(o,"click",e.DomEvent.preventDefault).addListener(o,"click",this.toggle,this),this._container}}),e.Map.mergeOptions({measureControl:!1}),e.Map.addInitHook(function(){this.options.measureControl&&(this.measureControl=e.Control.measureControl().addTo(this))}),e.Control.measureControl=function(t){return new e.Control.MeasureControl(t)}},window)
